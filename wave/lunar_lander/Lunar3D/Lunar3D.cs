// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Lunar3D.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace RLEnvs.Lunar3D {

  /// <summary>Holder for reflection information generated from Lunar3D.proto</summary>
  public static partial class Lunar3DReflection {

    #region Descriptor
    /// <summary>File descriptor for Lunar3D.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Lunar3DReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1MdW5hcjNELnByb3RvIpwCCgtPYnNlcnZhdGlvbhIMCgRwb3NYGAEgASgC",
            "EgwKBHBvc1kYAiABKAISDAoEcG9zWhgDIAEoAhIMCgR2ZWxYGAQgASgCEgwK",
            "BHZlbFkYBSABKAISDAoEdmVsWhgGIAEoAhIOCgZhbmdsZVgYByABKAISDgoG",
            "YW5nbGVZGAggASgCEg4KBmFuZ2xlWhgJIAEoAhIPCgdhbmdWZWxYGAogASgC",
            "Eg8KB2FuZ1ZlbFkYCyABKAISDwoHYW5nVmVsWhgMIAEoAhIUCgxmb290Q29u",
            "dGFjdEYYDSABKAISFAoMZm9vdENvbnRhY3RCGA4gASgCEhQKDGZvb3RDb250",
            "YWN0TBgPIAEoAhIUCgxmb290Q29udGFjdFIYECABKAIiuQEKBkFjdGlvbhIk",
            "CgxFbmdpbmVBY3Rpb24YASABKA4yDi5BY3Rpb24uRW5naW5lIogBCgZFbmdp",
            "bmUSCAoETk9ORRAAEg8KC1lBV1BPU0lUSVZFEAESDwoLWUFXTkVHQVRJVkUQ",
            "AhIRCg1QSVRDSFBPU0lUSVZFEAMSEQoNUElUQ0hORUdBVElWRRAEEhAKDFJP",
            "TExORUdBVElWRRAFEhAKDFJPTExQT1NJVElWRRAGEggKBE1BSU4QByJPCgxB",
            "Y3Rpb25SZXN1bHQSIQoLb2JzZXJ2YXRpb24YASABKAsyDC5PYnNlcnZhdGlv",
            "bhIOCgZyZXdhcmQYAiABKAISDAoEZG9uZRgDIAEoCCIaCglEaW1SZXN1bHQS",
            "DQoFdmFsdWUYASABKAUiEAoOU2VydmljZU1lc3NhZ2Uy7AEKDkx1bmFyM0RT",
            "ZXJ2aWNlEisKDEdldEFjdGlvbkRpbRIPLlNlcnZpY2VNZXNzYWdlGgouRGlt",
            "UmVzdWx0EjAKEUdldE9ic2VydmF0aW9uRGltEg8uU2VydmljZU1lc3NhZ2Ua",
            "Ci5EaW1SZXN1bHQSJwoNUGVyZm9ybUFjdGlvbhIHLkFjdGlvbhoNLkFjdGlv",
            "blJlc3VsdBIqCgZSZW5kZXISDy5TZXJ2aWNlTWVzc2FnZRoPLlNlcnZpY2VN",
            "ZXNzYWdlEiYKBVJlc2V0Eg8uU2VydmljZU1lc3NhZ2UaDC5PYnNlcnZhdGlv",
            "bkIRqgIOUkxFbnZzLkx1bmFyM0RiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::RLEnvs.Lunar3D.Observation), global::RLEnvs.Lunar3D.Observation.Parser, new[]{ "PosX", "PosY", "PosZ", "VelX", "VelY", "VelZ", "AngleX", "AngleY", "AngleZ", "AngVelX", "AngVelY", "AngVelZ", "FootContactF", "FootContactB", "FootContactL", "FootContactR" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RLEnvs.Lunar3D.Action), global::RLEnvs.Lunar3D.Action.Parser, new[]{ "EngineAction" }, null, new[]{ typeof(global::RLEnvs.Lunar3D.Action.Types.Engine) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RLEnvs.Lunar3D.ActionResult), global::RLEnvs.Lunar3D.ActionResult.Parser, new[]{ "Observation", "Reward", "Done" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RLEnvs.Lunar3D.DimResult), global::RLEnvs.Lunar3D.DimResult.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::RLEnvs.Lunar3D.ServiceMessage), global::RLEnvs.Lunar3D.ServiceMessage.Parser, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Observation : pb::IMessage<Observation> {
    private static readonly pb::MessageParser<Observation> _parser = new pb::MessageParser<Observation>(() => new Observation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Observation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RLEnvs.Lunar3D.Lunar3DReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Observation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Observation(Observation other) : this() {
      posX_ = other.posX_;
      posY_ = other.posY_;
      posZ_ = other.posZ_;
      velX_ = other.velX_;
      velY_ = other.velY_;
      velZ_ = other.velZ_;
      angleX_ = other.angleX_;
      angleY_ = other.angleY_;
      angleZ_ = other.angleZ_;
      angVelX_ = other.angVelX_;
      angVelY_ = other.angVelY_;
      angVelZ_ = other.angVelZ_;
      footContactF_ = other.footContactF_;
      footContactB_ = other.footContactB_;
      footContactL_ = other.footContactL_;
      footContactR_ = other.footContactR_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Observation Clone() {
      return new Observation(this);
    }

    /// <summary>Field number for the "posX" field.</summary>
    public const int PosXFieldNumber = 1;
    private float posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "posY" field.</summary>
    public const int PosYFieldNumber = 2;
    private float posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "posZ" field.</summary>
    public const int PosZFieldNumber = 3;
    private float posZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    /// <summary>Field number for the "velX" field.</summary>
    public const int VelXFieldNumber = 4;
    private float velX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VelX {
      get { return velX_; }
      set {
        velX_ = value;
      }
    }

    /// <summary>Field number for the "velY" field.</summary>
    public const int VelYFieldNumber = 5;
    private float velY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VelY {
      get { return velY_; }
      set {
        velY_ = value;
      }
    }

    /// <summary>Field number for the "velZ" field.</summary>
    public const int VelZFieldNumber = 6;
    private float velZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float VelZ {
      get { return velZ_; }
      set {
        velZ_ = value;
      }
    }

    /// <summary>Field number for the "angleX" field.</summary>
    public const int AngleXFieldNumber = 7;
    private float angleX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AngleX {
      get { return angleX_; }
      set {
        angleX_ = value;
      }
    }

    /// <summary>Field number for the "angleY" field.</summary>
    public const int AngleYFieldNumber = 8;
    private float angleY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AngleY {
      get { return angleY_; }
      set {
        angleY_ = value;
      }
    }

    /// <summary>Field number for the "angleZ" field.</summary>
    public const int AngleZFieldNumber = 9;
    private float angleZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AngleZ {
      get { return angleZ_; }
      set {
        angleZ_ = value;
      }
    }

    /// <summary>Field number for the "angVelX" field.</summary>
    public const int AngVelXFieldNumber = 10;
    private float angVelX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AngVelX {
      get { return angVelX_; }
      set {
        angVelX_ = value;
      }
    }

    /// <summary>Field number for the "angVelY" field.</summary>
    public const int AngVelYFieldNumber = 11;
    private float angVelY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AngVelY {
      get { return angVelY_; }
      set {
        angVelY_ = value;
      }
    }

    /// <summary>Field number for the "angVelZ" field.</summary>
    public const int AngVelZFieldNumber = 12;
    private float angVelZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AngVelZ {
      get { return angVelZ_; }
      set {
        angVelZ_ = value;
      }
    }

    /// <summary>Field number for the "footContactF" field.</summary>
    public const int FootContactFFieldNumber = 13;
    private float footContactF_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FootContactF {
      get { return footContactF_; }
      set {
        footContactF_ = value;
      }
    }

    /// <summary>Field number for the "footContactB" field.</summary>
    public const int FootContactBFieldNumber = 14;
    private float footContactB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FootContactB {
      get { return footContactB_; }
      set {
        footContactB_ = value;
      }
    }

    /// <summary>Field number for the "footContactL" field.</summary>
    public const int FootContactLFieldNumber = 15;
    private float footContactL_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FootContactL {
      get { return footContactL_; }
      set {
        footContactL_ = value;
      }
    }

    /// <summary>Field number for the "footContactR" field.</summary>
    public const int FootContactRFieldNumber = 16;
    private float footContactR_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FootContactR {
      get { return footContactR_; }
      set {
        footContactR_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Observation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Observation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosX, other.PosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosY, other.PosY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosZ, other.PosZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VelX, other.VelX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VelY, other.VelY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VelZ, other.VelZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngleX, other.AngleX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngleY, other.AngleY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngleZ, other.AngleZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngVelX, other.AngVelX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngVelY, other.AngVelY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngVelZ, other.AngVelZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FootContactF, other.FootContactF)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FootContactB, other.FootContactB)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FootContactL, other.FootContactL)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FootContactR, other.FootContactR)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosX);
      if (PosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosY);
      if (PosZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosZ);
      if (VelX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VelX);
      if (VelY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VelY);
      if (VelZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VelZ);
      if (AngleX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngleX);
      if (AngleY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngleY);
      if (AngleZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngleZ);
      if (AngVelX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngVelX);
      if (AngVelY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngVelY);
      if (AngVelZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngVelZ);
      if (FootContactF != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FootContactF);
      if (FootContactB != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FootContactB);
      if (FootContactL != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FootContactL);
      if (FootContactR != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FootContactR);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PosX != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PosY);
      }
      if (PosZ != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PosZ);
      }
      if (VelX != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(VelX);
      }
      if (VelY != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(VelY);
      }
      if (VelZ != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(VelZ);
      }
      if (AngleX != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(AngleX);
      }
      if (AngleY != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(AngleY);
      }
      if (AngleZ != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(AngleZ);
      }
      if (AngVelX != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(AngVelX);
      }
      if (AngVelY != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(AngVelY);
      }
      if (AngVelZ != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(AngVelZ);
      }
      if (FootContactF != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(FootContactF);
      }
      if (FootContactB != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(FootContactB);
      }
      if (FootContactL != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(FootContactL);
      }
      if (FootContactR != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(FootContactR);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (PosZ != 0F) {
        size += 1 + 4;
      }
      if (VelX != 0F) {
        size += 1 + 4;
      }
      if (VelY != 0F) {
        size += 1 + 4;
      }
      if (VelZ != 0F) {
        size += 1 + 4;
      }
      if (AngleX != 0F) {
        size += 1 + 4;
      }
      if (AngleY != 0F) {
        size += 1 + 4;
      }
      if (AngleZ != 0F) {
        size += 1 + 4;
      }
      if (AngVelX != 0F) {
        size += 1 + 4;
      }
      if (AngVelY != 0F) {
        size += 1 + 4;
      }
      if (AngVelZ != 0F) {
        size += 1 + 4;
      }
      if (FootContactF != 0F) {
        size += 1 + 4;
      }
      if (FootContactB != 0F) {
        size += 1 + 4;
      }
      if (FootContactL != 0F) {
        size += 1 + 4;
      }
      if (FootContactR != 0F) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Observation other) {
      if (other == null) {
        return;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.PosZ != 0F) {
        PosZ = other.PosZ;
      }
      if (other.VelX != 0F) {
        VelX = other.VelX;
      }
      if (other.VelY != 0F) {
        VelY = other.VelY;
      }
      if (other.VelZ != 0F) {
        VelZ = other.VelZ;
      }
      if (other.AngleX != 0F) {
        AngleX = other.AngleX;
      }
      if (other.AngleY != 0F) {
        AngleY = other.AngleY;
      }
      if (other.AngleZ != 0F) {
        AngleZ = other.AngleZ;
      }
      if (other.AngVelX != 0F) {
        AngVelX = other.AngVelX;
      }
      if (other.AngVelY != 0F) {
        AngVelY = other.AngVelY;
      }
      if (other.AngVelZ != 0F) {
        AngVelZ = other.AngVelZ;
      }
      if (other.FootContactF != 0F) {
        FootContactF = other.FootContactF;
      }
      if (other.FootContactB != 0F) {
        FootContactB = other.FootContactB;
      }
      if (other.FootContactL != 0F) {
        FootContactL = other.FootContactL;
      }
      if (other.FootContactR != 0F) {
        FootContactR = other.FootContactR;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            PosX = input.ReadFloat();
            break;
          }
          case 21: {
            PosY = input.ReadFloat();
            break;
          }
          case 29: {
            PosZ = input.ReadFloat();
            break;
          }
          case 37: {
            VelX = input.ReadFloat();
            break;
          }
          case 45: {
            VelY = input.ReadFloat();
            break;
          }
          case 53: {
            VelZ = input.ReadFloat();
            break;
          }
          case 61: {
            AngleX = input.ReadFloat();
            break;
          }
          case 69: {
            AngleY = input.ReadFloat();
            break;
          }
          case 77: {
            AngleZ = input.ReadFloat();
            break;
          }
          case 85: {
            AngVelX = input.ReadFloat();
            break;
          }
          case 93: {
            AngVelY = input.ReadFloat();
            break;
          }
          case 101: {
            AngVelZ = input.ReadFloat();
            break;
          }
          case 109: {
            FootContactF = input.ReadFloat();
            break;
          }
          case 117: {
            FootContactB = input.ReadFloat();
            break;
          }
          case 125: {
            FootContactL = input.ReadFloat();
            break;
          }
          case 133: {
            FootContactR = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Action : pb::IMessage<Action> {
    private static readonly pb::MessageParser<Action> _parser = new pb::MessageParser<Action>(() => new Action());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Action> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RLEnvs.Lunar3D.Lunar3DReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action(Action other) : this() {
      engineAction_ = other.engineAction_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Action Clone() {
      return new Action(this);
    }

    /// <summary>Field number for the "EngineAction" field.</summary>
    public const int EngineActionFieldNumber = 1;
    private global::RLEnvs.Lunar3D.Action.Types.Engine engineAction_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RLEnvs.Lunar3D.Action.Types.Engine EngineAction {
      get { return engineAction_; }
      set {
        engineAction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Action);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Action other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EngineAction != other.EngineAction) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EngineAction != 0) hash ^= EngineAction.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EngineAction != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EngineAction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EngineAction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EngineAction);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Action other) {
      if (other == null) {
        return;
      }
      if (other.EngineAction != 0) {
        EngineAction = other.EngineAction;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            engineAction_ = (global::RLEnvs.Lunar3D.Action.Types.Engine) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Action message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Engine {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("YAWPOSITIVE")] Yawpositive = 1,
        [pbr::OriginalName("YAWNEGATIVE")] Yawnegative = 2,
        [pbr::OriginalName("PITCHPOSITIVE")] Pitchpositive = 3,
        [pbr::OriginalName("PITCHNEGATIVE")] Pitchnegative = 4,
        [pbr::OriginalName("ROLLNEGATIVE")] Rollnegative = 5,
        [pbr::OriginalName("ROLLPOSITIVE")] Rollpositive = 6,
        [pbr::OriginalName("MAIN")] Main = 7,
      }

    }
    #endregion

  }

  public sealed partial class ActionResult : pb::IMessage<ActionResult> {
    private static readonly pb::MessageParser<ActionResult> _parser = new pb::MessageParser<ActionResult>(() => new ActionResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RLEnvs.Lunar3D.Lunar3DReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionResult(ActionResult other) : this() {
      observation_ = other.observation_ != null ? other.observation_.Clone() : null;
      reward_ = other.reward_;
      done_ = other.done_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionResult Clone() {
      return new ActionResult(this);
    }

    /// <summary>Field number for the "observation" field.</summary>
    public const int ObservationFieldNumber = 1;
    private global::RLEnvs.Lunar3D.Observation observation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::RLEnvs.Lunar3D.Observation Observation {
      get { return observation_; }
      set {
        observation_ = value;
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 2;
    private float reward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    /// <summary>Field number for the "done" field.</summary>
    public const int DoneFieldNumber = 3;
    private bool done_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Done {
      get { return done_; }
      set {
        done_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Observation, other.Observation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Reward, other.Reward)) return false;
      if (Done != other.Done) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (observation_ != null) hash ^= Observation.GetHashCode();
      if (Reward != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Reward);
      if (Done != false) hash ^= Done.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (observation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Observation);
      }
      if (Reward != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Reward);
      }
      if (Done != false) {
        output.WriteRawTag(24);
        output.WriteBool(Done);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (observation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Observation);
      }
      if (Reward != 0F) {
        size += 1 + 4;
      }
      if (Done != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionResult other) {
      if (other == null) {
        return;
      }
      if (other.observation_ != null) {
        if (observation_ == null) {
          observation_ = new global::RLEnvs.Lunar3D.Observation();
        }
        Observation.MergeFrom(other.Observation);
      }
      if (other.Reward != 0F) {
        Reward = other.Reward;
      }
      if (other.Done != false) {
        Done = other.Done;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (observation_ == null) {
              observation_ = new global::RLEnvs.Lunar3D.Observation();
            }
            input.ReadMessage(observation_);
            break;
          }
          case 21: {
            Reward = input.ReadFloat();
            break;
          }
          case 24: {
            Done = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DimResult : pb::IMessage<DimResult> {
    private static readonly pb::MessageParser<DimResult> _parser = new pb::MessageParser<DimResult>(() => new DimResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DimResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RLEnvs.Lunar3D.Lunar3DReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DimResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DimResult(DimResult other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DimResult Clone() {
      return new DimResult(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DimResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DimResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DimResult other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ServiceMessage : pb::IMessage<ServiceMessage> {
    private static readonly pb::MessageParser<ServiceMessage> _parser = new pb::MessageParser<ServiceMessage>(() => new ServiceMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServiceMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::RLEnvs.Lunar3D.Lunar3DReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceMessage(ServiceMessage other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServiceMessage Clone() {
      return new ServiceMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServiceMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServiceMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServiceMessage other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
